// Generated by CoffeeScript 1.3.3
(function() {
  var Overette,
    _this = this;

  $.fn.overette = function(options) {
    return this.each(function() {
      var $this;
      $this = $(this);
      return Overette.initializeTrigger($this, options);
    });
  };

  Overette = {
    dataSrcAttr: 'data-o-src',
    dataTypeAttr: 'data-o-type',
    dataActionAttr: 'data-o-action',
    defaults: {
      popover: {
        position: ["center", "bottom"]
      },
      dialog: {
        position: ["center", "center"]
      },
      dropdown: {
        position: ["center", "bottom"]
      }
    },
    initializeTrigger: function(element, options) {
      return Overette.observeOpenTriggers(element, options);
    },
    observeOpenTriggers: function(element, options) {
      return element.bind('click', function() {
        return Overette.openFromElement(element);
      });
    },
    openFromElement: function(element, options) {
      return Overette.open(element, element.attr(Overette.dataSrcAttr), element.attr(Overette.dataTypeAttr));
    },
    open: function(trigger, src, type, options) {
      var $o;
      if (options == null) {
        options = {};
      }
      $o = Overette[type].init(trigger, src, options);
      if (!Overette.isLoaded($o)) {
        return Overette.retrieveData($o, src, function(err, contents) {
          return Overette[type].replace.call($o, contents.html());
        });
      }
    },
    close: function($o) {
      return Overette.triggerClose($o);
    },
    retrieveData: function($o, src, callback) {
      var $data;
      if (src.charAt(0) === "#") {
        $data = $(src);
        return callback(null, $data);
      } else {
        return callback(new Error("Unsupported Source"));
      }
    },
    action: function(action, $o) {
      switch (action) {
        case "selection":
          return console.log("selection!");
        case "close":
          return Overette.close($o);
      }
    },
    isLoaded: function($o) {
      return $o && $o.hasClass("overette-loaded");
    },
    generateUniqueId: function(from) {
      return "overette-ready-" + Math.random().toString(36).substring(7);
    },
    show: function($o) {
      return $o.fadeIn(100);
    },
    hide: function($o) {
      return $o.fadeOut(100);
    },
    assignId: function($o, trigger) {
      $o.attr("id", Overette.generateUniqueId(trigger.attr(Overette.dataSrcAttr)));
      return trigger.attr(Overette.dataSrcAttr, "#" + $o.attr("id"));
    },
    onUpdate: function($o, callback) {
      return $o.bind("overette:update", callback);
    },
    triggerUpdate: function($o) {
      return $o.trigger("overette:update");
    },
    onClose: function($o, callback) {
      return $o.bind("overette:close", callback);
    },
    triggerClose: function($o) {
      return $o.trigger("overette:close");
    },
    observeActions: function($o, options) {
      var observe;
      observe = function() {
        return $o.find('*[' + Overette.dataActionAttr + ']').on('click', function() {
          return Overette.action($(this).attr(Overette.dataActionAttr), $o);
        });
      };
      Overette.onUpdate($o, observe);
      return observe();
    },
    popover: {
      init: function(trigger, src, options) {
        var $o;
        if (options == null) {
          options = {};
        }
        $o = $(src);
        if (Overette.isLoaded($o)) {
          Overette.show($o);
        } else {
          $o = Overette.popover.container;
          Overette.popover.setup($o, trigger, $.extend(Overette.defaults.popover, options));
          $('body').append($o);
          Overette.show($o);
        }
        return $o;
      },
      replace: function(contents) {
        this.removeClass("loading");
        this.find(".overette-content").html(contents);
        return Overette.triggerUpdate(this);
      },
      setup: function($o, trigger, options) {
        var _this = this;
        Overette.repositionAroundTriggerWhenWindowResized.call($o, trigger, options);
        Overette.closeWhenOverlayClicked.call($o, options);
        Overette.observeActions($o, options);
        Overette.onUpdate($o, function() {
          Overette.repositionAroundTrigger.call($o, trigger, options);
          return $o.addClass("overette-loaded").removeClass("loading");
        });
        Overette.onClose($o, function() {
          return Overette.hide($o);
        });
        return Overette.assignId($o, trigger);
      },
      container: $("<div class=\"overette-container overette-popover loading\"><div class=\"overette-overlay\"> </div><div class=\"overette-arrow\"> </div><div class=\"overette-content\"> </div></div>")
    },
    dialog: {
      init: function(trigger, src, options) {
        var $o;
        if (options == null) {
          options = {};
        }
        $o = $(src);
        if (Overette.isLoaded($o)) {
          Overette.show($o);
        } else {
          $o = Overette.dialog.container;
          Overette.dialog.setup($o, trigger, $.extend(Overette.defaults.dialog, options));
          $('body').append($o);
          Overette.show($o);
        }
        return $o;
      },
      replace: function(contents) {
        this.removeClass("loading");
        this.find(".overette-content").html(contents);
        return Overette.triggerUpdate(this);
      },
      setup: function($o, trigger, options) {
        var _this = this;
        Overette.centerWhenWindowResized.call($o, trigger, options);
        Overette.observeActions($o, options);
        Overette.onUpdate($o, function() {
          Overette.centerInWindow.call($o, trigger, options);
          return $o.addClass("overette-loaded").removeClass("loading");
        });
        Overette.onClose($o, function() {
          return Overette.hide($o);
        });
        return Overette.assignId($o, trigger);
      },
      container: $("<div class=\"overette-container overette-dialog loading\"><div class=\"overette-overlay\"> </div><div class=\"overette-content\"> </div></div>")
    },
    dropdown: {
      init: function(trigger, src, options) {
        var $o;
        if (options == null) {
          options = {};
        }
        $o = $(src);
        if (Overette.isLoaded($o)) {
          Overette.show($o);
        } else {
          $o = Overette.dropdown.container;
          Overette.dropdown.setup($o, trigger, $.extend(Overette.defaults.popover, options));
          $('body').append($o);
          Overette.show($o);
        }
        return $o;
      },
      replace: function(contents) {
        this.removeClass("loading");
        this.find(".overette-content").html(contents);
        return Overette.triggerUpdate(this);
      },
      setup: function($o, trigger, options) {
        var _this = this;
        Overette.repositionAroundTriggerWhenWindowResized.call($o, trigger, options);
        Overette.closeWhenOverlayClicked.call($o, options);
        Overette.observeActions($o, options);
        Overette.onUpdate($o, function() {
          Overette.repositionAroundTrigger.call($o, trigger, options);
          return $o.addClass("overette-loaded").removeClass("loading");
        });
        Overette.onClose($o, function() {
          return Overette.hide($o);
        });
        return Overette.assignId($o, trigger);
      },
      container: $("<div class=\"overette-container overette-dropdown loading\"><div class=\"overette-overlay\"> </div><div class=\"overette-arrow\"> </div><div class=\"overette-content\"> </div></div>")
    },
    closeWhenOverlayClicked: function(options) {
      var _this = this;
      return this.find(".overette-overlay").bind("click", function() {
        return Overette.close(_this);
      });
    },
    repositionAroundTriggerWhenWindowResized: function(trigger, options) {
      var _this = this;
      $(window).resize(function() {
        return Overette.repositionAroundTrigger.call(_this, trigger, options);
      });
      return Overette.repositionAroundTrigger.call(this, trigger, options);
    },
    centerWhenWindowResized: function(trigger, options) {
      var _this = this;
      $(window).resize(function() {
        return Overette.centerInWindow.call(_this, trigger, options);
      });
      return Overette.centerInWindow.call(this, trigger, options);
    },
    centerInWindow: function(trigger, options) {
      var $content, $window, content_height, content_width, left, top, window_height, window_width;
      $content = this.find('.overette-content');
      $window = $(window);
      content_width = $content.outerWidth();
      window_width = $window.width();
      left = window_width / 2 - content_width / 2;
      if (left < 0) {
        left = 0;
      }
      content_height = $content.outerHeight();
      window_height = $window.height();
      top = window_height / 2 - content_height / 2;
      if (top < 0) {
        top = 0;
      }
      return $content.css('left', left).css('top', top);
    },
    repositionAroundTrigger: function(trigger, options) {
      var arrow_width, base_left, content_width, coordinates, window_width;
      coordinates = trigger.offset();
      content_width = this.find('.overette-content').outerWidth();
      arrow_width = this.find(".overette-arrow").outerWidth();
      window_width = $(window).width();
      base_left = coordinates.left + trigger.outerWidth() / 2;
      coordinates.left = base_left - content_width / 2;
      if (coordinates.left < 0) {
        coordinates.left = 0;
      } else if (coordinates.left + content_width > window_width) {
        coordinates.left = window_width - content_width;
      }
      this.find('.overette-content').css('left', coordinates.left).css('top', coordinates.top + trigger.height() + this.find('.overette-arrow').height());
      return this.find('.overette-arrow').css('left', base_left - arrow_width / 2).css('top', coordinates.top + trigger.height() + 2);
    }
  };

}).call(this);
